-----------------------------------------------
Video 8 -> Panicking when something goes wrong
-----------------------------------------------
Panicking es como tener un botón de emergencia que para pa ejecución del programa, lo cual previene que el programa continue
con basuta que puede ser incorrecta o peligrosa.

Se puede llamar el macro panic!() en cualquier parte el código, si no se especifica ningún mensaje, el mensaje por defecto sera
"thread 'main' panicked at 'explicit panic'", cuando se le especifica un mensaje a esta funcion/metodo se le puede enviar argumentos
como si se tratara de println!.

Un ejemplo muy importante de cuanto utilizar panic es out-of-bounds memory access, lo cual significa que se desea acceder a un
espacio en memoria que no existe debido a que no ha sido creado, esto es muy importante para prevenir una vulneravilidad de 
seguridad llamada buffer overread.

Hay un aspecto que se debe tener muy en cuenta cuando se invoca panic! y es que no hay manera de mantener o recuperar la ejecución
del programa.

Un momento en el que no se debe hacer panic! es cuando una falla es un ocurrencia normal dada la operación que se este haciendo.
A pesar de estas pautas, siempre puede elegir entrar en pánico antes de decidir cómo manejar los errores, luego puede buscar llamadas
al pánico para actualizar su código de manejo de errores más adelante. (control de exepciones)

unreachable! -> Esto es útil para indicar al compilador que es imposible llegar a cierto punto en el código.
unreachable! -> Es util para indicar que se comenzo a trabajar en nuevo feature, pero que este todavia no ha sido implementado.
assert! -> Recibe un valor boleano y si es faso entra en panico.
assert_eq! -> Recibe dos valores y entra en panico si no son iguales.
assert_ne! -> Recibe dos valores y entra en panico si son iguales.

