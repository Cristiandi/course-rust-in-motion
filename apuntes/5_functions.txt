--------------------
VIDEO 5 -> Functions
--------------------
Las funciones en RUST comienzan con la palabra reservada fn seguida por el nombre que se le quiera dar, en parentesis
se listan los parametros cada uno con su nombre, luego dos puntos (:) y su tipo, para separar los parametros se utiliza la
coma, una funcion puede tener tantos parametros como se quiera, si la funcion retorna un valor, se debe poner un guion
(-) seguido de un mayor que (>) para crear una flecha (->) y luego especificar el tipo de dato que retorna, si la
funcion no retorna un valor, entonces no se pone ni la flecha ni el tipo de dato que retorna, luego, se abren y cierran
los corchetes y en medio de estos va el cÃ³digo que la funcion va a ejecutar.
para llamar la funciones, se hace de manera muy parecida a lenguajes como JAVA, C# o JavaScript, ejemplo de todo lo 
anterior:
  ```
  fn next_birthday(name: &str, current_age: u8) {
    let next_age = current_age + 1;
    println!("Hi {}, on your next birthday, you'll be {}!", name, next_age);
  }

  fn main() {
    next_birthday("Cristian David Ippolito", 23);
  }
  ```

para las funciones que retornan un valor es importante recordar que cuando se quiera retornar el valor implicita,
no se debe finalizar la linea con un punto y coma (;), de lo contrario RUST generara un error, ejemplo:
  ```
  fn square(num: i32) -> i32 {
    num * num
  }

  fn main() {
    println!("the answer is {}", square(3));
  }
  ```

si por el contrario se desea realizar de manera explicita, se hace de la siguiente manera:
  ```
  fn square(num: i32) -> i32 {
    return num * num;
  }

  fn main() {
    println!("the answer is {}", square(3));
  }
  ```